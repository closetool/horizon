// Code generated by MockGen. DO NOT EDIT.
// Source: application.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	q "github.com/horizoncd/horizon/lib/q"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockApplicationManager is a mock of ApplicationManager interface.
type MockApplicationManager struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationManagerMockRecorder
}

// MockApplicationManagerMockRecorder is the mock recorder for MockApplicationManager.
type MockApplicationManagerMockRecorder struct {
	mock *MockApplicationManager
}

// NewMockApplicationManager creates a new mock instance.
func NewMockApplicationManager(ctrl *gomock.Controller) *MockApplicationManager {
	mock := &MockApplicationManager{ctrl: ctrl}
	mock.recorder = &MockApplicationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationManager) EXPECT() *MockApplicationManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApplicationManager) Create(ctx context.Context, application *models.Application, extraMembers map[string]string) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, application, extraMembers)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockApplicationManagerMockRecorder) Create(ctx, application, extraMembers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationManager)(nil).Create), ctx, application, extraMembers)
}

// DeleteByID mocks base method.
func (m *MockApplicationManager) DeleteByID(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockApplicationManagerMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockApplicationManager)(nil).DeleteByID), ctx, id)
}

// GetByGroupIDs mocks base method.
func (m *MockApplicationManager) GetByGroupIDs(ctx context.Context, groupIDs []uint) ([]*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupIDs", ctx, groupIDs)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupIDs indicates an expected call of GetByGroupIDs.
func (mr *MockApplicationManagerMockRecorder) GetByGroupIDs(ctx, groupIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupIDs", reflect.TypeOf((*MockApplicationManager)(nil).GetByGroupIDs), ctx, groupIDs)
}

// GetByID mocks base method.
func (m *MockApplicationManager) GetByID(ctx context.Context, id uint) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockApplicationManagerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockApplicationManager)(nil).GetByID), ctx, id)
}

// GetByIDIncludeSoftDelete mocks base method.
func (m *MockApplicationManager) GetByIDIncludeSoftDelete(ctx context.Context, id uint) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDIncludeSoftDelete", ctx, id)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDIncludeSoftDelete indicates an expected call of GetByIDIncludeSoftDelete.
func (mr *MockApplicationManagerMockRecorder) GetByIDIncludeSoftDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDIncludeSoftDelete", reflect.TypeOf((*MockApplicationManager)(nil).GetByIDIncludeSoftDelete), ctx, id)
}

// GetByIDs mocks base method.
func (m *MockApplicationManager) GetByIDs(ctx context.Context, ids []uint) ([]*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockApplicationManagerMockRecorder) GetByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockApplicationManager)(nil).GetByIDs), ctx, ids)
}

// GetByName mocks base method.
func (m *MockApplicationManager) GetByName(ctx context.Context, name string) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockApplicationManagerMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockApplicationManager)(nil).GetByName), ctx, name)
}

// GetByNameFuzzily mocks base method.
func (m *MockApplicationManager) GetByNameFuzzily(ctx context.Context, name string) ([]*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameFuzzily", ctx, name)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameFuzzily indicates an expected call of GetByNameFuzzily.
func (mr *MockApplicationManagerMockRecorder) GetByNameFuzzily(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameFuzzily", reflect.TypeOf((*MockApplicationManager)(nil).GetByNameFuzzily), ctx, name)
}

// GetByNameFuzzilyIncludeSoftDelete mocks base method.
func (m *MockApplicationManager) GetByNameFuzzilyIncludeSoftDelete(ctx context.Context, name string) ([]*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameFuzzilyIncludeSoftDelete", ctx, name)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameFuzzilyIncludeSoftDelete indicates an expected call of GetByNameFuzzilyIncludeSoftDelete.
func (mr *MockApplicationManagerMockRecorder) GetByNameFuzzilyIncludeSoftDelete(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameFuzzilyIncludeSoftDelete", reflect.TypeOf((*MockApplicationManager)(nil).GetByNameFuzzilyIncludeSoftDelete), ctx, name)
}

// List mocks base method.
func (m *MockApplicationManager) List(ctx context.Context, groupIDs []uint, query *q.Query) (int, []*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, groupIDs, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Application)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockApplicationManagerMockRecorder) List(ctx, groupIDs, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationManager)(nil).List), ctx, groupIDs, query)
}

// Transfer mocks base method.
func (m *MockApplicationManager) Transfer(ctx context.Context, id, groupID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, id, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockApplicationManagerMockRecorder) Transfer(ctx, id, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockApplicationManager)(nil).Transfer), ctx, id, groupID)
}

// UpdateByID mocks base method.
func (m *MockApplicationManager) UpdateByID(ctx context.Context, id uint, application *models.Application) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, application)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockApplicationManagerMockRecorder) UpdateByID(ctx, id, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockApplicationManager)(nil).UpdateByID), ctx, id, application)
}
