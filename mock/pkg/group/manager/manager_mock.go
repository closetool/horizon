// Code generated by MockGen. DO NOT EDIT.
// Source: group.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockGroupManager is a mock of GroupManager interface.
type MockGroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockGroupManagerMockRecorder
}

// MockGroupManagerMockRecorder is the mock recorder for MockGroupManager.
type MockGroupManagerMockRecorder struct {
	mock *MockGroupManager
}

// NewMockGroupManager creates a new mock instance.
func NewMockGroupManager(ctrl *gomock.Controller) *MockGroupManager {
	mock := &MockGroupManager{ctrl: ctrl}
	mock.recorder = &MockGroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupManager) EXPECT() *MockGroupManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupManager) Create(ctx context.Context, group *models.Group) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, group)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupManagerMockRecorder) Create(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupManager)(nil).Create), ctx, group)
}

// Delete mocks base method.
func (m *MockGroupManager) Delete(ctx context.Context, id uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupManagerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupManager)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockGroupManager) GetAll(ctx context.Context) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGroupManagerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGroupManager)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockGroupManager) GetByID(ctx context.Context, id uint) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupManagerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroupManager)(nil).GetByID), ctx, id)
}

// GetByIDNameFuzzily mocks base method.
func (m *MockGroupManager) GetByIDNameFuzzily(ctx context.Context, id uint, name string) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDNameFuzzily", ctx, id, name)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDNameFuzzily indicates an expected call of GetByIDNameFuzzily.
func (mr *MockGroupManagerMockRecorder) GetByIDNameFuzzily(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDNameFuzzily", reflect.TypeOf((*MockGroupManager)(nil).GetByIDNameFuzzily), ctx, id, name)
}

// GetByIDs mocks base method.
func (m *MockGroupManager) GetByIDs(ctx context.Context, ids []uint) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockGroupManagerMockRecorder) GetByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockGroupManager)(nil).GetByIDs), ctx, ids)
}

// GetByNameFuzzily mocks base method.
func (m *MockGroupManager) GetByNameFuzzily(ctx context.Context, name string) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameFuzzily", ctx, name)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameFuzzily indicates an expected call of GetByNameFuzzily.
func (mr *MockGroupManagerMockRecorder) GetByNameFuzzily(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameFuzzily", reflect.TypeOf((*MockGroupManager)(nil).GetByNameFuzzily), ctx, name)
}

// GetByNameFuzzilyIncludeSoftDelete mocks base method.
func (m *MockGroupManager) GetByNameFuzzilyIncludeSoftDelete(ctx context.Context, name string) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameFuzzilyIncludeSoftDelete", ctx, name)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameFuzzilyIncludeSoftDelete indicates an expected call of GetByNameFuzzilyIncludeSoftDelete.
func (mr *MockGroupManagerMockRecorder) GetByNameFuzzilyIncludeSoftDelete(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameFuzzilyIncludeSoftDelete", reflect.TypeOf((*MockGroupManager)(nil).GetByNameFuzzilyIncludeSoftDelete), ctx, name)
}

// GetByNameOrPathUnderParent mocks base method.
func (m *MockGroupManager) GetByNameOrPathUnderParent(ctx context.Context, name, path string, parentID uint) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameOrPathUnderParent", ctx, name, path, parentID)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameOrPathUnderParent indicates an expected call of GetByNameOrPathUnderParent.
func (mr *MockGroupManagerMockRecorder) GetByNameOrPathUnderParent(ctx, name, path, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameOrPathUnderParent", reflect.TypeOf((*MockGroupManager)(nil).GetByNameOrPathUnderParent), ctx, name, path, parentID)
}

// GetByPaths mocks base method.
func (m *MockGroupManager) GetByPaths(ctx context.Context, paths []string) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPaths", ctx, paths)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPaths indicates an expected call of GetByPaths.
func (mr *MockGroupManagerMockRecorder) GetByPaths(ctx, paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPaths", reflect.TypeOf((*MockGroupManager)(nil).GetByPaths), ctx, paths)
}

// GetChildren mocks base method.
func (m *MockGroupManager) GetChildren(ctx context.Context, parentID uint, pageNumber, pageSize int) ([]*models.GroupOrApplication, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", ctx, parentID, pageNumber, pageSize)
	ret0, _ := ret[0].([]*models.GroupOrApplication)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockGroupManagerMockRecorder) GetChildren(ctx, parentID, pageNumber, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockGroupManager)(nil).GetChildren), ctx, parentID, pageNumber, pageSize)
}

// GetDefaultRegions mocks base method.
func (m *MockGroupManager) GetDefaultRegions(ctx context.Context, id uint) ([]*models.EnvironmentRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRegions", ctx, id)
	ret0, _ := ret[0].([]*models.EnvironmentRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultRegions indicates an expected call of GetDefaultRegions.
func (mr *MockGroupManagerMockRecorder) GetDefaultRegions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRegions", reflect.TypeOf((*MockGroupManager)(nil).GetDefaultRegions), ctx, id)
}

// GetSelectableRegions mocks base method.
func (m *MockGroupManager) GetSelectableRegions(ctx context.Context, id uint) (models.RegionParts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectableRegions", ctx, id)
	ret0, _ := ret[0].(models.RegionParts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectableRegions indicates an expected call of GetSelectableRegions.
func (mr *MockGroupManagerMockRecorder) GetSelectableRegions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectableRegions", reflect.TypeOf((*MockGroupManager)(nil).GetSelectableRegions), ctx, id)
}

// GetSelectableRegionsByEnv mocks base method.
func (m *MockGroupManager) GetSelectableRegionsByEnv(ctx context.Context, id uint, env string) (models.RegionParts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectableRegionsByEnv", ctx, id, env)
	ret0, _ := ret[0].(models.RegionParts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectableRegionsByEnv indicates an expected call of GetSelectableRegionsByEnv.
func (mr *MockGroupManagerMockRecorder) GetSelectableRegionsByEnv(ctx, id, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectableRegionsByEnv", reflect.TypeOf((*MockGroupManager)(nil).GetSelectableRegionsByEnv), ctx, id, env)
}

// GetSubGroups mocks base method.
func (m *MockGroupManager) GetSubGroups(ctx context.Context, id uint, pageNumber, pageSize int) ([]*models.Group, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubGroups", ctx, id, pageNumber, pageSize)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubGroups indicates an expected call of GetSubGroups.
func (mr *MockGroupManagerMockRecorder) GetSubGroups(ctx, id, pageNumber, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubGroups", reflect.TypeOf((*MockGroupManager)(nil).GetSubGroups), ctx, id, pageNumber, pageSize)
}

// GetSubGroupsByGroupIDs mocks base method.
func (m *MockGroupManager) GetSubGroupsByGroupIDs(ctx context.Context, groupIDs []uint) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubGroupsByGroupIDs", ctx, groupIDs)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubGroupsByGroupIDs indicates an expected call of GetSubGroupsByGroupIDs.
func (mr *MockGroupManagerMockRecorder) GetSubGroupsByGroupIDs(ctx, groupIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubGroupsByGroupIDs", reflect.TypeOf((*MockGroupManager)(nil).GetSubGroupsByGroupIDs), ctx, groupIDs)
}

// GetSubGroupsUnderParentIDs mocks base method.
func (m *MockGroupManager) GetSubGroupsUnderParentIDs(ctx context.Context, parentIDs []uint) ([]*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubGroupsUnderParentIDs", ctx, parentIDs)
	ret0, _ := ret[0].([]*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubGroupsUnderParentIDs indicates an expected call of GetSubGroupsUnderParentIDs.
func (mr *MockGroupManagerMockRecorder) GetSubGroupsUnderParentIDs(ctx, parentIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubGroupsUnderParentIDs", reflect.TypeOf((*MockGroupManager)(nil).GetSubGroupsUnderParentIDs), ctx, parentIDs)
}

// GroupExist mocks base method.
func (m *MockGroupManager) GroupExist(ctx context.Context, groupID uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExist", ctx, groupID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GroupExist indicates an expected call of GroupExist.
func (mr *MockGroupManagerMockRecorder) GroupExist(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExist", reflect.TypeOf((*MockGroupManager)(nil).GroupExist), ctx, groupID)
}

// IsRootGroup mocks base method.
func (m *MockGroupManager) IsRootGroup(ctx context.Context, groupID uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRootGroup", ctx, groupID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRootGroup indicates an expected call of IsRootGroup.
func (mr *MockGroupManagerMockRecorder) IsRootGroup(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRootGroup", reflect.TypeOf((*MockGroupManager)(nil).IsRootGroup), ctx, groupID)
}

// Transfer mocks base method.
func (m *MockGroupManager) Transfer(ctx context.Context, id, newParentID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, id, newParentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockGroupManagerMockRecorder) Transfer(ctx, id, newParentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockGroupManager)(nil).Transfer), ctx, id, newParentID)
}

// UpdateBasic mocks base method.
func (m *MockGroupManager) UpdateBasic(ctx context.Context, group *models.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasic", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBasic indicates an expected call of UpdateBasic.
func (mr *MockGroupManagerMockRecorder) UpdateBasic(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasic", reflect.TypeOf((*MockGroupManager)(nil).UpdateBasic), ctx, group)
}

// UpdateRegionSelector mocks base method.
func (m *MockGroupManager) UpdateRegionSelector(ctx context.Context, id uint, regionSelector string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegionSelector", ctx, id, regionSelector)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegionSelector indicates an expected call of UpdateRegionSelector.
func (mr *MockGroupManagerMockRecorder) UpdateRegionSelector(ctx, id, regionSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegionSelector", reflect.TypeOf((*MockGroupManager)(nil).UpdateRegionSelector), ctx, id, regionSelector)
}
