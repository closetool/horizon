// Code generated by MockGen. DO NOT EDIT.
// Source: member.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockMemberManager is a mock of MemberManager interface.
type MockMemberManager struct {
	ctrl     *gomock.Controller
	recorder *MockMemberManagerMockRecorder
}

// MockMemberManagerMockRecorder is the mock recorder for MockMemberManager.
type MockMemberManagerMockRecorder struct {
	mock *MockMemberManager
}

// NewMockMemberManager creates a new mock instance.
func NewMockMemberManager(ctrl *gomock.Controller) *MockMemberManager {
	mock := &MockMemberManager{ctrl: ctrl}
	mock.recorder = &MockMemberManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberManager) EXPECT() *MockMemberManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMemberManager) Create(ctx context.Context, member *models.Member) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, member)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMemberManagerMockRecorder) Create(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMemberManager)(nil).Create), ctx, member)
}

// DeleteMember mocks base method.
func (m *MockMemberManager) DeleteMember(ctx context.Context, memberID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockMemberManagerMockRecorder) DeleteMember(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMemberManager)(nil).DeleteMember), ctx, memberID)
}

// DeleteMemberByMemberNameID mocks base method.
func (m *MockMemberManager) DeleteMemberByMemberNameID(ctx context.Context, memberNameID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberByMemberNameID", ctx, memberNameID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberByMemberNameID indicates an expected call of DeleteMemberByMemberNameID.
func (mr *MockMemberManagerMockRecorder) DeleteMemberByMemberNameID(ctx, memberNameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberByMemberNameID", reflect.TypeOf((*MockMemberManager)(nil).DeleteMemberByMemberNameID), ctx, memberNameID)
}

// Get mocks base method.
func (m *MockMemberManager) Get(ctx context.Context, resourceType models.ResourceType, resourceID uint, memberType models.MemberType, memberInfo uint) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceType, resourceID, memberType, memberInfo)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemberManagerMockRecorder) Get(ctx, resourceType, resourceID, memberType, memberInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemberManager)(nil).Get), ctx, resourceType, resourceID, memberType, memberInfo)
}

// GetByID mocks base method.
func (m *MockMemberManager) GetByID(ctx context.Context, memberID uint) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, memberID)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMemberManagerMockRecorder) GetByID(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMemberManager)(nil).GetByID), ctx, memberID)
}

// HardDeleteMemberByResourceTypeID mocks base method.
func (m *MockMemberManager) HardDeleteMemberByResourceTypeID(ctx context.Context, resourceType string, resourceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteMemberByResourceTypeID", ctx, resourceType, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteMemberByResourceTypeID indicates an expected call of HardDeleteMemberByResourceTypeID.
func (mr *MockMemberManagerMockRecorder) HardDeleteMemberByResourceTypeID(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteMemberByResourceTypeID", reflect.TypeOf((*MockMemberManager)(nil).HardDeleteMemberByResourceTypeID), ctx, resourceType, resourceID)
}

// ListDirectMember mocks base method.
func (m *MockMemberManager) ListDirectMember(ctx context.Context, resourceType models.ResourceType, resourceID uint) ([]models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectMember", ctx, resourceType, resourceID)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectMember indicates an expected call of ListDirectMember.
func (mr *MockMemberManagerMockRecorder) ListDirectMember(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectMember", reflect.TypeOf((*MockMemberManager)(nil).ListDirectMember), ctx, resourceType, resourceID)
}

// ListDirectMemberOnCondition mocks base method.
func (m *MockMemberManager) ListDirectMemberOnCondition(ctx context.Context, resourceType models.ResourceType, resourceID uint) ([]models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectMemberOnCondition", ctx, resourceType, resourceID)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectMemberOnCondition indicates an expected call of ListDirectMemberOnCondition.
func (mr *MockMemberManagerMockRecorder) ListDirectMemberOnCondition(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectMemberOnCondition", reflect.TypeOf((*MockMemberManager)(nil).ListDirectMemberOnCondition), ctx, resourceType, resourceID)
}

// ListMembersByUserID mocks base method.
func (m *MockMemberManager) ListMembersByUserID(ctx context.Context, userID uint) ([]models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersByUserID indicates an expected call of ListMembersByUserID.
func (mr *MockMemberManagerMockRecorder) ListMembersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersByUserID", reflect.TypeOf((*MockMemberManager)(nil).ListMembersByUserID), ctx, userID)
}

// ListResourceOfMemberInfo mocks base method.
func (m *MockMemberManager) ListResourceOfMemberInfo(ctx context.Context, resourceType models.ResourceType, memberInfo uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceOfMemberInfo", ctx, resourceType, memberInfo)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceOfMemberInfo indicates an expected call of ListResourceOfMemberInfo.
func (mr *MockMemberManagerMockRecorder) ListResourceOfMemberInfo(ctx, resourceType, memberInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceOfMemberInfo", reflect.TypeOf((*MockMemberManager)(nil).ListResourceOfMemberInfo), ctx, resourceType, memberInfo)
}

// ListResourceOfMemberInfoByRole mocks base method.
func (m *MockMemberManager) ListResourceOfMemberInfoByRole(ctx context.Context, resourceType models.ResourceType, memberInfo uint, role string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceOfMemberInfoByRole", ctx, resourceType, memberInfo, role)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceOfMemberInfoByRole indicates an expected call of ListResourceOfMemberInfoByRole.
func (mr *MockMemberManagerMockRecorder) ListResourceOfMemberInfoByRole(ctx, resourceType, memberInfo, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceOfMemberInfoByRole", reflect.TypeOf((*MockMemberManager)(nil).ListResourceOfMemberInfoByRole), ctx, resourceType, memberInfo, role)
}

// UpdateByID mocks base method.
func (m *MockMemberManager) UpdateByID(ctx context.Context, id uint, role string) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, role)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockMemberManagerMockRecorder) UpdateByID(ctx, id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockMemberManager)(nil).UpdateByID), ctx, id, role)
}
