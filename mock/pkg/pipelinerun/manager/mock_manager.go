// Code generated by MockGen. DO NOT EDIT.
// Source: pipelinerun.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	q "github.com/horizoncd/horizon/lib/q"
	models "github.com/horizoncd/horizon/pkg/pr/models"
)

// MockPipelineRunManager is a mock of PipelineRunManager interface.
type MockPipelineRunManager struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRunManagerMockRecorder
}

// MockPipelineRunManagerMockRecorder is the mock recorder for MockPipelineRunManager.
type MockPipelineRunManagerMockRecorder struct {
	mock *MockPipelineRunManager
}

// NewMockPipelineRunManager creates a new mock instance.
func NewMockPipelineRunManager(ctrl *gomock.Controller) *MockPipelineRunManager {
	mock := &MockPipelineRunManager{ctrl: ctrl}
	mock.recorder = &MockPipelineRunManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRunManager) EXPECT() *MockPipelineRunManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPipelineRunManager) Create(ctx context.Context, pipelinerun *models.Pipelinerun) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pipelinerun)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPipelineRunManagerMockRecorder) Create(ctx, pipelinerun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPipelineRunManager)(nil).Create), ctx, pipelinerun)
}

// DeleteByClusterID mocks base method.
func (m *MockPipelineRunManager) DeleteByClusterID(ctx context.Context, clusterID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByClusterID", ctx, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByClusterID indicates an expected call of DeleteByClusterID.
func (mr *MockPipelineRunManagerMockRecorder) DeleteByClusterID(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByClusterID", reflect.TypeOf((*MockPipelineRunManager)(nil).DeleteByClusterID), ctx, clusterID)
}

// DeleteByID mocks base method.
func (m *MockPipelineRunManager) DeleteByID(ctx context.Context, pipelinerunID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, pipelinerunID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPipelineRunManagerMockRecorder) DeleteByID(ctx, pipelinerunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPipelineRunManager)(nil).DeleteByID), ctx, pipelinerunID)
}

// GetByCIEventID mocks base method.
func (m *MockPipelineRunManager) GetByCIEventID(ctx context.Context, ciEventID string) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCIEventID", ctx, ciEventID)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCIEventID indicates an expected call of GetByCIEventID.
func (mr *MockPipelineRunManagerMockRecorder) GetByCIEventID(ctx, ciEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCIEventID", reflect.TypeOf((*MockPipelineRunManager)(nil).GetByCIEventID), ctx, ciEventID)
}

// GetByClusterID mocks base method.
func (m *MockPipelineRunManager) GetByClusterID(ctx context.Context, clusterID uint, canRollback bool, query q.Query) (int, []*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClusterID", ctx, clusterID, canRollback, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Pipelinerun)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByClusterID indicates an expected call of GetByClusterID.
func (mr *MockPipelineRunManagerMockRecorder) GetByClusterID(ctx, clusterID, canRollback, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClusterID", reflect.TypeOf((*MockPipelineRunManager)(nil).GetByClusterID), ctx, clusterID, canRollback, query)
}

// GetByID mocks base method.
func (m *MockPipelineRunManager) GetByID(ctx context.Context, pipelinerunID uint) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, pipelinerunID)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPipelineRunManagerMockRecorder) GetByID(ctx, pipelinerunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPipelineRunManager)(nil).GetByID), ctx, pipelinerunID)
}

// GetFirstCanRollbackPipelinerun mocks base method.
func (m *MockPipelineRunManager) GetFirstCanRollbackPipelinerun(ctx context.Context, clusterID uint) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstCanRollbackPipelinerun", ctx, clusterID)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstCanRollbackPipelinerun indicates an expected call of GetFirstCanRollbackPipelinerun.
func (mr *MockPipelineRunManagerMockRecorder) GetFirstCanRollbackPipelinerun(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstCanRollbackPipelinerun", reflect.TypeOf((*MockPipelineRunManager)(nil).GetFirstCanRollbackPipelinerun), ctx, clusterID)
}

// GetLatestByClusterIDAndActionAndStatus mocks base method.
func (m *MockPipelineRunManager) GetLatestByClusterIDAndActionAndStatus(ctx context.Context, clusterID uint, action, status string) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByClusterIDAndActionAndStatus", ctx, clusterID, action, status)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByClusterIDAndActionAndStatus indicates an expected call of GetLatestByClusterIDAndActionAndStatus.
func (mr *MockPipelineRunManagerMockRecorder) GetLatestByClusterIDAndActionAndStatus(ctx, clusterID, action, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByClusterIDAndActionAndStatus", reflect.TypeOf((*MockPipelineRunManager)(nil).GetLatestByClusterIDAndActionAndStatus), ctx, clusterID, action, status)
}

// GetLatestByClusterIDAndActions mocks base method.
func (m *MockPipelineRunManager) GetLatestByClusterIDAndActions(ctx context.Context, clusterID uint, actions ...string) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterID}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestByClusterIDAndActions", varargs...)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByClusterIDAndActions indicates an expected call of GetLatestByClusterIDAndActions.
func (mr *MockPipelineRunManagerMockRecorder) GetLatestByClusterIDAndActions(ctx, clusterID interface{}, actions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterID}, actions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByClusterIDAndActions", reflect.TypeOf((*MockPipelineRunManager)(nil).GetLatestByClusterIDAndActions), varargs...)
}

// GetLatestSuccessByClusterID mocks base method.
func (m *MockPipelineRunManager) GetLatestSuccessByClusterID(ctx context.Context, clusterID uint) (*models.Pipelinerun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSuccessByClusterID", ctx, clusterID)
	ret0, _ := ret[0].(*models.Pipelinerun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSuccessByClusterID indicates an expected call of GetLatestSuccessByClusterID.
func (mr *MockPipelineRunManagerMockRecorder) GetLatestSuccessByClusterID(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSuccessByClusterID", reflect.TypeOf((*MockPipelineRunManager)(nil).GetLatestSuccessByClusterID), ctx, clusterID)
}

// UpdateCIEventIDByID mocks base method.
func (m *MockPipelineRunManager) UpdateCIEventIDByID(ctx context.Context, pipelinerunID uint, ciEventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCIEventIDByID", ctx, pipelinerunID, ciEventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCIEventIDByID indicates an expected call of UpdateCIEventIDByID.
func (mr *MockPipelineRunManagerMockRecorder) UpdateCIEventIDByID(ctx, pipelinerunID, ciEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCIEventIDByID", reflect.TypeOf((*MockPipelineRunManager)(nil).UpdateCIEventIDByID), ctx, pipelinerunID, ciEventID)
}

// UpdateColumns mocks base method.
func (m *MockPipelineRunManager) UpdateColumns(ctx context.Context, pipelinerunID uint, columns map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", ctx, pipelinerunID, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockPipelineRunManagerMockRecorder) UpdateColumns(ctx, pipelinerunID, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockPipelineRunManager)(nil).UpdateColumns), ctx, pipelinerunID, columns)
}

// UpdateConfigCommitByID mocks base method.
func (m *MockPipelineRunManager) UpdateConfigCommitByID(ctx context.Context, pipelinerunID uint, commit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigCommitByID", ctx, pipelinerunID, commit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfigCommitByID indicates an expected call of UpdateConfigCommitByID.
func (mr *MockPipelineRunManagerMockRecorder) UpdateConfigCommitByID(ctx, pipelinerunID, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigCommitByID", reflect.TypeOf((*MockPipelineRunManager)(nil).UpdateConfigCommitByID), ctx, pipelinerunID, commit)
}

// UpdateResultByID mocks base method.
func (m *MockPipelineRunManager) UpdateResultByID(ctx context.Context, pipelinerunID uint, result *models.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResultByID", ctx, pipelinerunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResultByID indicates an expected call of UpdateResultByID.
func (mr *MockPipelineRunManagerMockRecorder) UpdateResultByID(ctx, pipelinerunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResultByID", reflect.TypeOf((*MockPipelineRunManager)(nil).UpdateResultByID), ctx, pipelinerunID, result)
}

// UpdateStatusByID mocks base method.
func (m *MockPipelineRunManager) UpdateStatusByID(ctx context.Context, pipelinerunID uint, result models.PipelineStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByID", ctx, pipelinerunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByID indicates an expected call of UpdateStatusByID.
func (mr *MockPipelineRunManagerMockRecorder) UpdateStatusByID(ctx, pipelinerunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByID", reflect.TypeOf((*MockPipelineRunManager)(nil).UpdateStatusByID), ctx, pipelinerunID, result)
}
