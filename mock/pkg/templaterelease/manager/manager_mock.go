// Code generated by MockGen. DO NOT EDIT.
// Source: templaterelease.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockTemplateReleaseManager is a mock of TemplateReleaseManager interface.
type MockTemplateReleaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateReleaseManagerMockRecorder
}

// MockTemplateReleaseManagerMockRecorder is the mock recorder for MockTemplateReleaseManager.
type MockTemplateReleaseManagerMockRecorder struct {
	mock *MockTemplateReleaseManager
}

// NewMockTemplateReleaseManager creates a new mock instance.
func NewMockTemplateReleaseManager(ctrl *gomock.Controller) *MockTemplateReleaseManager {
	mock := &MockTemplateReleaseManager{ctrl: ctrl}
	mock.recorder = &MockTemplateReleaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateReleaseManager) EXPECT() *MockTemplateReleaseManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemplateReleaseManager) Create(ctx context.Context, templateRelease *models.TemplateRelease) (*models.TemplateRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, templateRelease)
	ret0, _ := ret[0].(*models.TemplateRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTemplateReleaseManagerMockRecorder) Create(ctx, templateRelease interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemplateReleaseManager)(nil).Create), ctx, templateRelease)
}

// DeleteByID mocks base method.
func (m *MockTemplateReleaseManager) DeleteByID(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockTemplateReleaseManagerMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockTemplateReleaseManager)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockTemplateReleaseManager) GetByID(ctx context.Context, releaseID uint) (*models.TemplateRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, releaseID)
	ret0, _ := ret[0].(*models.TemplateRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTemplateReleaseManagerMockRecorder) GetByID(ctx, releaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTemplateReleaseManager)(nil).GetByID), ctx, releaseID)
}

// GetByTemplateNameAndRelease mocks base method.
func (m *MockTemplateReleaseManager) GetByTemplateNameAndRelease(ctx context.Context, templateName, release string) (*models.TemplateRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTemplateNameAndRelease", ctx, templateName, release)
	ret0, _ := ret[0].(*models.TemplateRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTemplateNameAndRelease indicates an expected call of GetByTemplateNameAndRelease.
func (mr *MockTemplateReleaseManagerMockRecorder) GetByTemplateNameAndRelease(ctx, templateName, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTemplateNameAndRelease", reflect.TypeOf((*MockTemplateReleaseManager)(nil).GetByTemplateNameAndRelease), ctx, templateName, release)
}

// GetRefOfApplication mocks base method.
func (m *MockTemplateReleaseManager) GetRefOfApplication(ctx context.Context, id uint) ([]*models.Application, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefOfApplication", ctx, id)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRefOfApplication indicates an expected call of GetRefOfApplication.
func (mr *MockTemplateReleaseManagerMockRecorder) GetRefOfApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefOfApplication", reflect.TypeOf((*MockTemplateReleaseManager)(nil).GetRefOfApplication), ctx, id)
}

// GetRefOfCluster mocks base method.
func (m *MockTemplateReleaseManager) GetRefOfCluster(ctx context.Context, id uint) ([]*models.Cluster, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefOfCluster", ctx, id)
	ret0, _ := ret[0].([]*models.Cluster)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRefOfCluster indicates an expected call of GetRefOfCluster.
func (mr *MockTemplateReleaseManagerMockRecorder) GetRefOfCluster(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefOfCluster", reflect.TypeOf((*MockTemplateReleaseManager)(nil).GetRefOfCluster), ctx, id)
}

// ListByTemplateID mocks base method.
func (m *MockTemplateReleaseManager) ListByTemplateID(ctx context.Context, id uint) ([]*models.TemplateRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTemplateID", ctx, id)
	ret0, _ := ret[0].([]*models.TemplateRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTemplateID indicates an expected call of ListByTemplateID.
func (mr *MockTemplateReleaseManagerMockRecorder) ListByTemplateID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTemplateID", reflect.TypeOf((*MockTemplateReleaseManager)(nil).ListByTemplateID), ctx, id)
}

// ListByTemplateName mocks base method.
func (m *MockTemplateReleaseManager) ListByTemplateName(ctx context.Context, templateName string) ([]*models.TemplateRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTemplateName", ctx, templateName)
	ret0, _ := ret[0].([]*models.TemplateRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTemplateName indicates an expected call of ListByTemplateName.
func (mr *MockTemplateReleaseManagerMockRecorder) ListByTemplateName(ctx, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTemplateName", reflect.TypeOf((*MockTemplateReleaseManager)(nil).ListByTemplateName), ctx, templateName)
}

// UpdateByID mocks base method.
func (m *MockTemplateReleaseManager) UpdateByID(ctx context.Context, releaseID uint, release *models.TemplateRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, releaseID, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockTemplateReleaseManagerMockRecorder) UpdateByID(ctx, releaseID, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockTemplateReleaseManager)(nil).UpdateByID), ctx, releaseID, release)
}
