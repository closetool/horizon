// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	q "github.com/horizoncd/horizon/lib/q"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManager) Create(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManager)(nil).Create), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserManager) DeleteUser(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserManagerMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserManager)(nil).DeleteUser), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockUserManager) GetUserByID(ctx context.Context, userID uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserManagerMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserManager)(nil).GetUserByID), ctx, userID)
}

// GetUserByIDP mocks base method.
func (m *MockUserManager) GetUserByIDP(ctx context.Context, email, idp string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDP", ctx, email, idp)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDP indicates an expected call of GetUserByIDP.
func (mr *MockUserManagerMockRecorder) GetUserByIDP(ctx, email, idp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDP", reflect.TypeOf((*MockUserManager)(nil).GetUserByIDP), ctx, email, idp)
}

// GetUserByIDs mocks base method.
func (m *MockUserManager) GetUserByIDs(ctx context.Context, userIDs []uint) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDs indicates an expected call of GetUserByIDs.
func (mr *MockUserManagerMockRecorder) GetUserByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDs", reflect.TypeOf((*MockUserManager)(nil).GetUserByIDs), ctx, userIDs)
}

// GetUserMapByIDs mocks base method.
func (m *MockUserManager) GetUserMapByIDs(ctx context.Context, userIDs []uint) (map[uint]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMapByIDs", ctx, userIDs)
	ret0, _ := ret[0].(map[uint]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMapByIDs indicates an expected call of GetUserMapByIDs.
func (mr *MockUserManagerMockRecorder) GetUserMapByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMapByIDs", reflect.TypeOf((*MockUserManager)(nil).GetUserMapByIDs), ctx, userIDs)
}

// List mocks base method.
func (m *MockUserManager) List(ctx context.Context, query *q.Query) (int64, []*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUserManagerMockRecorder) List(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserManager)(nil).List), ctx, query)
}

// ListByEmail mocks base method.
func (m *MockUserManager) ListByEmail(ctx context.Context, emails []string) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEmail", ctx, emails)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEmail indicates an expected call of ListByEmail.
func (mr *MockUserManagerMockRecorder) ListByEmail(ctx, emails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEmail", reflect.TypeOf((*MockUserManager)(nil).ListByEmail), ctx, emails)
}

// UpdateByID mocks base method.
func (m *MockUserManager) UpdateByID(ctx context.Context, id uint, db *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, db)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserManagerMockRecorder) UpdateByID(ctx, id, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserManager)(nil).UpdateByID), ctx, id, db)
}
