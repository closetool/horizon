// Code generated by MockGen. DO NOT EDIT.
// Source: userlink.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/horizoncd/horizon/pkg/idp/utils"
	models "github.com/horizoncd/horizon/pkg/models"
)

// MockUserLinkManager is a mock of UserLinkManager interface.
type MockUserLinkManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserLinkManagerMockRecorder
}

// MockUserLinkManagerMockRecorder is the mock recorder for MockUserLinkManager.
type MockUserLinkManagerMockRecorder struct {
	mock *MockUserLinkManager
}

// NewMockUserLinkManager creates a new mock instance.
func NewMockUserLinkManager(ctrl *gomock.Controller) *MockUserLinkManager {
	mock := &MockUserLinkManager{ctrl: ctrl}
	mock.recorder = &MockUserLinkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLinkManager) EXPECT() *MockUserLinkManagerMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *MockUserLinkManager) CreateLink(ctx context.Context, uid, idpID uint, claims *utils.Claims, deletable bool) (*models.UserLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", ctx, uid, idpID, claims, deletable)
	ret0, _ := ret[0].(*models.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockUserLinkManagerMockRecorder) CreateLink(ctx, uid, idpID, claims, deletable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockUserLinkManager)(nil).CreateLink), ctx, uid, idpID, claims, deletable)
}

// DeleteByID mocks base method.
func (m *MockUserLinkManager) DeleteByID(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserLinkManagerMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserLinkManager)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockUserLinkManager) GetByID(ctx context.Context, id uint) (*models.UserLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserLinkManagerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserLinkManager)(nil).GetByID), ctx, id)
}

// GetByIDPAndSub mocks base method.
func (m *MockUserLinkManager) GetByIDPAndSub(ctx context.Context, idpID uint, sub string) (*models.UserLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDPAndSub", ctx, idpID, sub)
	ret0, _ := ret[0].(*models.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDPAndSub indicates an expected call of GetByIDPAndSub.
func (mr *MockUserLinkManagerMockRecorder) GetByIDPAndSub(ctx, idpID, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDPAndSub", reflect.TypeOf((*MockUserLinkManager)(nil).GetByIDPAndSub), ctx, idpID, sub)
}

// ListByUserID mocks base method.
func (m *MockUserLinkManager) ListByUserID(ctx context.Context, uid uint) ([]*models.UserLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, uid)
	ret0, _ := ret[0].([]*models.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockUserLinkManagerMockRecorder) ListByUserID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockUserLinkManager)(nil).ListByUserID), ctx, uid)
}
